package imprimePDF;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.swing.JOptionPane;




	

	
	public class PrintImage {
		  static public void main(String args[]) throws Exception {
		
		 //  PrintService service = PrintServiceLookup.lookupDefaultPrintService();
			  
			DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;  
			  
		    PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
		    pras.add(new Copies(1));
		    PrintService pss[] = PrintServiceLookup.lookupPrintServices(DocFlavor.INPUT_STREAM.GIF, pras);
		    System.out.println(""+pss);
		    
		    if (pss.length == 0)
		      throw new RuntimeException("No printer services available.");
		   // PrintService ps = pss[0];
		    PrintService ps =  PrintServiceLookup.lookupDefaultPrintService();
		    System.out.println("Tu impresora por default es--->: " + ps.getName());
		    DocPrintJob job = ps.createPrintJob();
		    
		    // trabajar con la imagen
		    
		    //Creamos un arreglo de tipo byte
		    byte[] bytes;

		    FileInputStream fin = new FileInputStream("c://temp//alex//20505552670-01-F001-00000444.PNG");
		    bytes= extractBytes("c://temp//alex//20505552670-01-F001-00000444.PNG");
		    
		    Doc doc = new SimpleDoc(bytes,flavor,null);
		    
	//	    Doc doc = new SimpleDoc(fin, DocFlavor.INPUT_STREAM.GIF, null);

		    
		    
//		    try {
//			      //El metodo print imprime
//			      job.print(doc, null);
			      
			      
//			    } catch (Exception er) {
//			      JOptionPane.showMessageDialog(null,"Error al imprimir: " + er.getMessage());
//			    }
			    

		    
		    job.print(doc, pras);
		    fin.close();
		    
		    System.out.println("Nil...");
		    
		    
		    
		    
		    

		    
		    

		    //Aca convertimos el string(cuerpo del ticket) a bytes tal como
		    //lo maneja la impresora(mas bien ticketera :p)
	//	    bytes = this.contentTicket.getBytes();

		    //Creamos un documento a imprimir, a el se le appendeara
		    //el arreglo de bytes
	//	    Doc doc = new SimpleDoc(bytes,flavor,null);
		      
		    //Creamos un trabajo de impresión
	//	    DocPrintJob job = service.createPrintJob();

		    //Imprimimos dentro de un try de a huevo
		    
		    
		    
		  }
		  
		  
		  
		  
		  public static byte[] extractBytes (String ImageName) throws IOException {
			  // open image
			  File imgPath = new File(ImageName);
			  BufferedImage bufferedImage = ImageIO.read(imgPath);

			  // get DataBufferBytes from Raster
			  WritableRaster raster = bufferedImage .getRaster();
			  DataBufferByte data   = (DataBufferByte) raster.getDataBuffer();

			  return ( data.getData() );
			 }
	
}



